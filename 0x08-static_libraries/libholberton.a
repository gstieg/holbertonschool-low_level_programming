!<arch>
9-strcpy.o/     1551377418  1000  1000  100664  333       `
#include "holberton.h"

/**
 * _strcpy - prints one char of 2
 *
 * @dest: value of string
 *
 * @src: string pointer
 *
 * Return: dest
 */
char *_strcpy(char *dest, char *src)
{
	int counter = 0, a = 0;

	while (src[counter] != '\0')
	{
		counter++;
		}
		for (; a < counter; a++)
		{
			dest[a] = src[a];
			}
			return (dest);
}

0-isupper.o/    1551376123  1000  1000  100664  200       `
#include "holberton.h"

/**
 * _isupper - checks for uppercase
 *
 * @c: input value
 *
 * Return: 0 or 1
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	   return (1);
	   else
		return (0);
}
0-memset.o/     1551379653  1000  1000  100664  280       `
#include "holberton.h"

/**
 * _memset - fills memory with byte
 *
 * @s: input
 *
 * @b: byte
 *
 * @n: input int
 *
 * Return: s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int count;

	for (count = 0; count < n; count++)
	{
		s[count] = b;
}
		return (s);
}
0-strcat.o/     1551376391  1000  1000  100664  469       `
#include "holberton.h"

/**
 * _strcat -  concatenates two strings
 *
 * @dest: input value
 *
 * @src: second input value
 *
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int count = 0, f_count = 0, s_count = 0;

	while (dest[f_count] != '\0')
	      f_count++;
	       while (src[s_count] != '\0')
	      	    s_count++;
		    while (count < s_count)
		    {
			dest[f_count] = src[count];
				      f_count++;
					count++;
					}
					return (dest);
}
100-atoi.o/     1551377625  1000  1000  100664  22        `
#include "holberton.h"1-isdigit.o/    1551376446  1000  1000  100664  205       `
#include "holberton.h"

/**
 * _isdigit - checks for 0 through 9
 *
 * @c: value of input
 *
 * Return: 0 or 1
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	   return (1);
	   else
		return (0);
}

1-memcpy.o/     1551376531  1000  1000  100664  320       `
#include "holberton.h"

/**
 * _memcpy - copies memeory area
 *
 * @dest: destination
 *
 * @src: source
 *
 * @n: input
 *
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int count;

	for (count = 0; count < n; count++)
	{
		*(dest + count) = *(src + count);
		}
		return (dest);
}
1-strncat.o/    1551376607  1000  1000  100664  545       `
#include "holberton.h"

/**
 * _strncat - concatenates two strings
 *
 * @dest: input value
 *
 * @src: second value
 *
 * @n: third value
 *
 * Return: dest string
 */
char *_strncat(char *dest, char *src, int n)
{
	int count = 0, s_count = 0, f_count = 0;

	while (dest[f_count] != '\0')
	      f_count++;
	      while (src[s_count] != '\0')
	      	    s_count++;
		    if (s_count < n)
		       n = s_count;
		       while (count < n)
		       {
			dest[f_count] = src[count];
				      f_count++;
					count++;
					}
					return (dest);
}

2-strchr.o/     1551376657  1000  1000  100664  398       `
#include "holberton.h"
#define NULL 0

/**
 * _strchr - locate character
 *
 * @s: input pointer
 *
 * @c: char
 *
 * Return: s
 */
char *_strchr(char *s, char c)
{
	int count;

	for (count = 0; s[count] != '\0'; count++)
	{
		if (s[count] == c)
		   {
				s = &s[count];
				    return (s);
				    	   }
					   }
					   if (c == '\0')
					      return (&s[count]);
					      return (NULL);
}
2-strlen.o/     1551376719  1000  1000  100664  239       `
#include "holberton.h"

/**
 * _strlen - returns the length of the string
 *
 * @s: input value
 *
 * Return: string length
 */
int _strlen(char *s)
{
	int length;

	for (length = 0; *s != '\0'; ++s)
	    length++;
	    return (length);
}

2-strncpy.o/    1551376820  1000  1000  100664  239       `
#include "holberton.h"

/**
 * _strlen - returns the length of the string
 *
 * @s: input value
 *
 * Return: string length
 */
int _strlen(char *s)
{
	int length;

	for (length = 0; *s != '\0'; ++s)
	    length++;
	    return (length);
}

3-islower.o/    1551376905  1000  1000  100664  211       `
#include "holberton.h"

/**
 * _islower - checks for the lowercase letter
 *
 * @c: Input Value
 *
 * Return: 1 or 0
 */
int _islower(int c)
{
	if (c <= 'z' && c >= 'a')
	   return (1);
	   else
		return (0);
}

3-puts.o/       1551376948  1000  1000  100664  223       `
#include "holberton.h"

/**
 * _puts - prints the string
 *
 * @str: String of value
 */
void _puts(char *str)
{
	int count = 0;

	while (str[count] != '\0')
	{
		_putchar(str[count]);
			count++;
			}
			_putchar('\n');
}

3-strcmp.o/     1551375715  1000  1000  100664  0         `
3-strsmp.o/     1551377069  1000  1000  100664  388       `
#include "holberton.h"

/**
 * _strcmp -  compares two strings
 *
 * @s1: value one
 *
 * @s2: value two
 *
 * Return: difference
 */
int _strcmp(char *s1, char *s2)
{
	int count = 0;

	while (s1[count] != '\0' || s2[count] != '\0')
	{
		if (s1[count] != s2[count])
		   	      return (s1[count] - s2[count]);
			      	     count++;
				     }
				     return (s1[count] - s2[count]);
}
3-strspn.o/     1551377158  1000  1000  100664  505       `
#include "holberton.h"

/**
 * _strspn - gets the length of a prefix
 *
 * @s: input pointer
 *
 * @accept: accept pointer
 *
 * Return: s
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int s_count, a_count;

	for (s_count = 0; s[s_count] != '\0'; s_count++)
	{
		for (a_count = 0; accept[a_count] != '\0'; a_count++)
		    	     if (s[s_count] == accept[a_count])
			     		       break;
						if (accept[a_count] == '\0')
						   		    break;
								    }
								    return (s_count);
}

4-isalpa.o/     1551377223  1000  1000  100664  233       `
#include "holberton.h"

/**
 * _isalpha - converts all letters to 1
 *
 * @c: Input Value
 *
 * Return: 1 or 0
 */
int _isalpha(int c)
{
	if ((c <= 'z' && c >= 'a') || (c <= 'Z' && c >= 'A'))
	   return (1);
	   else
		return (0);
}

4-isalpha.o/    1551375757  1000  1000  100664  0         `
4-strpbrk.o/    1551377269  1000  1000  100664  455       `
#include "holberton.h"
#define NULL 0

/**
 * _strpbrk - searches for any set of bytes
 *
 * @s: input
 *
 * @accept: input
 *
 * Return: s
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int s_count, a_count;

	for (s_count = 0; s[s_count] != '\0'; s_count++)
	{
		for (a_count = 0; accept[a_count] != '\0'; a_count++)
		    	     if (s[s_count] == accept[a_count])
			     		       return (&s[s_count]);
					       }
					       return (NULL);
}

5-strstr.o/     1551375785  1000  1000  100664  0         `
6-abs.o/        1551377381  1000  1000  100664  244       `
#include "holberton.h"

/**
 * _abs - computes the absolute value
 *
 * @n: Value of input number
 *
 * Return: absolute value
 */
int _abs(int n)
{
	if (n < 0)
	   return (n * -1);
	   else if (n == 0)
	   	return (0);
		else
			return (n);
}
_putchar.o/     1551377474  1000  1000  100664  247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

